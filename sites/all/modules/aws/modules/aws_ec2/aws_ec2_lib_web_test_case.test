<?php

/**
 * @file aws_ec2_lib simple tests
 * 
 * Copyright (c) 2010-2012 DOCOMO Innovations, Inc.
 * 
 */

module_load_include('test', 'cloud');

class AwsEc2LibWebTestCases extends CloudTestCase {

//  public static function getInfo() {
//    return array(
//      'name' => 'AWS EC2 Library Module Tests',
//      'description' => 'Web Test Cases for AWS EC2 Library',
//      'group' => 'AWS EC2 LIB',
//    );
//  }
//  
//  /**
//   * Configure the instance
//   */
//  public function configure() {
//    $clouds = $this->getClouds();
//    foreach ($clouds as $cloud) {
//      $edit = $this->getAccessKeys($cloud);
//      $this->drupalPost('admin/settings/' . $cloud, $edit, t('Save configuration'));
//      $this->assertText(t('The configuration options have been saved.'),
//                        'Confirm Message: ' . t('The configuration options have been saved.'));
//    }
//  }
//  
//  /**
//   * Test Main Cloud Listing Page
//   */
//  public function testCloudList() {
//    $this->drupalGet('clouds');
//    $this->assertResponse(200, t('HTTP 200: Clouds Page'));
//    $this->assertNoText(t('Notice'), t('Make sure w/o Notice'));
//    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
//  }
//  
//  /**
//   * Test Main Cloud Listing Page Refresh
//   */
//  public function testCloudRefresh() {
//    $this->refreshPageAll();
//    $this->drupalGet('clouds'); 
//    $this->assertResponse(200, t('HTTP 200: Clouds Page'));
//    $this->assertNoText(t('Notice'), t('Make sure w/o Notice'));
//    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
//  }
//
//  /**
//   * Test the Sub Cloud Listing Page
//   */
//  public function testSubCloudLinks() {
//    $clouds = $this->getClouds();
//    foreach ($clouds as $cloud) {
//      $this->testSubCloudList($cloud);      
//      $this->testSubCloudLaunchList($cloud);
//      $this->testSubCloudInstancesList($cloud);
//      $this->testSubCloudImagesAllList($cloud);
//      $this->testSubCloudImagesOwnerList($cloud);
//      $this->testSecurityGroupsList($cloud);
//      $this->testSubCloudImagesOwnerList($cloud);
//      $this->testSecurityGroupsList($cloud);
//      $this->testSSHKeysList($cloud);
//      $this->testElasticIpList($cloud);
//      $this->testVolumesList($cloud);
//      $this->testSnapshotsList($cloud);
//    }
//  }
//  
//  /**
//   * Tests refreshing the data and returning to 
//   * Listing pages
//   */
//  public function testRefresh() {
//    $clouds = $this->getClouds();  
//    foreach ($clouds as $cloud) {
//      $this->testSubCloudList($cloud, TRUE);
//      $this->testSubCloudInstancesList($cloud, TRUE);
//      $this->testSubCloudImagesAllList($cloud, TRUE);
//      $this->testSSHKeysList($cloud, TRUE);
//      $this->testElasticIpList($cloud, TRUE);
//      $this->testVolumesList($cloud, TRUE);
//      $this->testSnapshotsList($cloud, TRUE);
//    }
//  }
//  
//  /**
//   * Test ssh key creation
//   */
//  public function testCreateSSHKey() {
//    $clouds = $this->getClouds();
//    foreach ($clouds as $cloud) {
//      $key_name = $this->privileged_user->name;
//      $this->createSSHKey($key_name, $cloud);
//      $this->assertText  (t('Created a Key Pair Successfully.'            ),
//                          t('Confirmed: Created a Key Pair Successfully for SubCloud: ' . $cloud));
//      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'         ));
//      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'       ));
//    }
//  }
//  
//  /**
//   * Test ssh key deletion
//   */
//  public function testDeleteSSHKey() {
//    $clouds = $this->getClouds();    
//    foreach ($clouds as $cloud) {
//      $key_name = $this->privileged_user->name;
//      $this->deleteSSHKey($key_name, $cloud);
//      $this->assertText  (t('Key Pair deleted successfully: @keyname', array('@keyname' => $key_name)),
//                          t('Confirmed: Key Pair deleted successfully: @keyname', array('@keyname' => $key_name)));
//      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
//      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
//    }
//  }
//  
//  /**
//   * Test Security Group Creation
//   */
//  public function testSecurityGroupCreation() {
//    $clouds = $this->getClouds();
//    foreach ($clouds as $cloud) {
//      $edit = array(
//        'cloud_context' => $cloud,
//        'GroupName_text' => 'SimpleTest_Group',
//        'GroupDesc_text' => 'SimpleTest_Group Description',
//      );
//      $this->drupalPost('clouds/' . $cloud . '/security_groups/create', $edit, t('Create'));
//      $this->assertText(t('Created a Security Group Successfully'), t('Confirmed: Security Group Created Successfuly for @cloud', array('@cloud' => $cloud)));
//      $this->assertText(t('SimpleTest_Group'), t('SimpleTest_Group listed after creation'));
//      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
//      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
//    }  
//  }
//  
//  /**
//   * Test Deleting Security Group
//   */
//  public function testDeleteSecurityGroupCreation() {
//    $clouds = $this->getClouds();
//    foreach ($clouds as $cloud) {
//      $this->drupalGet('clouds/' . $cloud . '/security_groups/delete', array(
//        'query' => array(
//          'sg_name' => 'SimpleTest_Group',
//        )
//      ));
//      $this->assertText(t('Security Group deleted successfully: @group', array('@group' => 'SimpleTest_Group')), t('SimpleTest_Group delete'));
//      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
//      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
//    }
//  }
//  
//  /**
//   * Test Creating Elastic Ip
//   */
//  public function testCreateElasticIp() {
//    $clouds = $this->getClouds();
//    foreach ($clouds as $cloud) {
//      $edit = array(
//        'cloud_context' => $cloud,
//      );
//      $this->drupalPost('clouds/' . $cloud . '/elastic_ips', $edit, t('Create'));
//      $this->assertText(t('Created Elastic IP'), t('Elastic IP created for @cloud', array('@cloud' => $cloud)));
//      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
//      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
//    }
//  }
//  
//  /**
//   * Test deleting the Elastic Ip
//   */
//  public function testDeleteElasticIp() {
//    $clouds = $this->getClouds();
//    foreach ($clouds as $cloud) {
//      //get the newly created IP
//      $this->refreshInstances($cloud);
//      $ip = $this->getIp($cloud);
//      if ($ip != FALSE) {
//        $this->drupalGet('clouds/' . $cloud . '/elastic_ips/delete', array(
//          'query' => array(
//            'ip' => $ip,
//          ),
//        ));
//        $this->aseertText(t('Deleted Elastic IP: @ip', array('@ip' => $ip)), t('Elastic IP @ip deleted for @cloud', array('@ip' => $ip, '@cloud' => $cloud)));
//        $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
//        $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
//      }
//    }  
//  }
//  
//  // Commented out.  There is no way to find the new volume as it is
//  // an async command.  When Delete runs, it will not neccessaryily find it.
////  /**
////   * Test creating Ebs Volume
////   */
////  public function testCreateEbsVolumeForm() {
////    $clouds = $this->getClouds();
////    
////    foreach ($clouds as $cloud) {
////      $this->refreshInstances($cloud);  //refresh data first
////      $zones = array();
////
////      $edit = array(
////        'cloud_context' => $cloud,
////        'Name_text' => t('SimpleTest_Volume'),
////        'Size_text' => t('1'),
////      );
////      $this->drupalPost('clouds/' . $cloud . '/ebs_volumes/create', $edit, t('Create'));
////      $this->assertText(t('Creating Volume'), t('SimpleTest_Volume being created'));
////      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
////      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
////    }
////  }
////  
////  /**
////   * Test deleting Ebs Volume
////   */
////  public function testDeleteEbsVolumeForm() {
////    $clouds = $this->getClouds();
////    foreach ($clouds as $cloud) {
////      $this->refreshInstances($cloud);
////      $volume_id = $this->getVolumeId('SimpleTest_Volume', $cloud);
////      if ($volume_id != FALSE) {
////        $this->drupalGet('clouds/' . $cloud . '/ebs_volumes/delete', array(
////          'query' => array(
////            'vol_id' => $volume_id,
////          ),
////        ));
////        $this->assertText(t('Volume deleted successfully: @volume_id', array('@volume_id' => $volume_id)), t('Volume deleted successfully: @volume_id for @cloud', array('@volume_id' => $volume_id, '@cloud' => $cloud)));
////        $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
////        $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
////      }
////    }
////  }
//  
//  /**
//   * Helper function to create ssh keys 
//   */
//  private function createSSHKey($key_name, $cloud) {
//    $edit = array(
//      'keyname_text' => $key_name,
//      'cloud_context' => $cloud,
//    );
//    $this->drupalPost('clouds/' . $cloud . '/ssh_keys/create', $edit, t('Create'));
//  }
//  
//  /**
//   * Helper function to delete ssh keys
//   */
//  private function deleteSSHKey($key_name, $cloud) {
//    $this->drupalGet('clouds/' . $cloud . '/ssh_keys/delete', array(
//      'query' => array(
//          'key_name' => $key_name,
//        ),
//      ));
//  }
//
//  /**
//   * Test SubCloud Listing Page 
//   */
//  private function testSubCloudList($cloud, $refresh = FALSE) {
//    if ($refresh) {
//      $this->refreshPageAll();
//    }
//    $this->drupalGet('clouds/' . $cloud);
//    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Listing page'));
//    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
//    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
//  }
//  
//  /**
//   * Test SubCloud Launch Page
//   */
//  private function testSubCloudLaunchList($cloud) {
//    //design/server_templates/amazon_ec2/list
//    $this->drupalGet('design/server_templates/' . $cloud . '/list');
//    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Instance Templates page'));
//    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
//    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
//  }
//  
//  /**
//   * Test SubCloud Instances Listing Page 
//   */
//  private function testSubCloudInstancesList($cloud, $refresh = FALSE) {
//    if ($refresh) {
//      $this->refreshInstances($cloud);
//    }
//    $this->drupalGet('clouds/' . $cloud . '/instances');
//    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Instances page'));
//    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
//    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
//  }
//  
//  /**
//   * Test SubCloud Images Listing page 
//   */
//  private function testSubCloudImagesAllList($cloud, $refresh = FALSE) {
//    if ($refresh) {
//      $this->refreshImages($cloud);
//    }
//    $this->drupalGet('clouds/' . $cloud . '/images');
//    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Images All page'));
//    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
//    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
//  }
//  
//  /**
//   * Test SubCloud Images Listing page by Owner
//   */  
//  private function testSubCloudImagesOwnerList($cloud) {
//    $this->drupalGet('clouds/' . $cloud . '/images/owner');
//    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Images By Owner page'));
//    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
//    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
//  }
//  
//  /**
//   * Test security group listing page 
//   */
//  private function testSecurityGroupsList($cloud, $refresh = FALSE) {
//    if ($refresh) {
//      $this->refreshSecurityGroups($cloud);
//    }
//    $this->drupalGet('clouds/' . $cloud . '/security_groups');
//    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Security Groups page'));
//    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
//    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
//  }
//  
//  /**
//   * Test SSH Keys Listing page 
//   */
//  private function testSSHKeysList($cloud, $refresh = FALSE) {
//    if ($refresh) {
//      $this->refreshSSHKeys($cloud);
//    }
//    $this->drupalGet('clouds/' . $cloud . '/ssh_keys');
//    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' SSH Keys page'));
//    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
//    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
//  }
//  
//  /**
//   * Test ElasticIP Listing Page 
//   */
//  private function testElasticIpList($cloud, $refresh = FALSE) {
//    if ($refresh) {
//      $this->refreshElasticIP($cloud);
//    }
//    $this->drupalGet('clouds/' . $cloud . '/elastic_ips');
//    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Elastic IPs page'));
//    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
//    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
//  }
//  
//  /**
//   * Test Volumes Listing Page 
//   */
//  private function testVolumesList($cloud, $refresh = FALSE) {
//    if ($refresh) {
//      $this->refreshVolumes($cloud);
//    }
//    $this->drupalGet('clouds/' . $cloud . '/ebs_volumes');
//    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' EBS Volumes page'));
//    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
//    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
//  }
//  
//  /**
//   * Test Snapshots Listing Page 
//   */
//  private function testSnapshotsList($cloud, $refresh = FALSE) {
//    if ($refresh) {
//      $this->refreshSnapshots($cloud);
//    }
//    $this->drupalGet('clouds/' . $cloud . '/ebs_snapshots');
//    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' EBS Snapshot page'));
//    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
//    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
//  }
//  
//  /**
//   * Helper function to refresh the clouds page
//   */
//  private function refreshPageAll() {
//    $this->drupalGet('clouds', array(
//      'query' => array(
//        'src' => 'clouds',
//      ),
//    ));
//  }
//  
//  /**
//   * Helper function to refresh a subcloud page
//   */
//  private function refreshInstances($cloud) {
//    $this->drupalGet('clouds/' . $cloud . '/get_instances_data', array(
//      'query' => array(
//        'destination' => 'clouds/' . $cloud . '/instances',
//      ),
//    ));
//  }
//  
//  /**
//   * Helper function to refresh an images listing page
//   */
//  private function refreshImages($cloud) {
//    $this->drupalGet('clouds/' . $cloud . '/getimagedata', array(
//      'query' => array(
//        'destination' => 'clouds/' . $cloud . '/images',
//      ),
//    ));
//  }
//  
//  /**
//   * Helper function to refresh a security group listing page 
//   */
//  private function refreshSecurityGroups($cloud) {
//    $this->drupalGet('clouds/' . $cloud . '/get_security_group_data');
//  }
//  
//  /**
//   * Helper function to refresh ssh keys
//   */
//  private function refreshSSHKeys($cloud) {
//    $this->drupalGet('clouds/' . $cloud . '/get_ssh_keys_data');
//  }
//
//  /**
//   * Helper function to refresh Elastic IP
//   */
//  private function refreshElasticIP($cloud) {
//    $this->drupalGet('clouds/' . $cloud . '/get_elastic_ips_data');
//  }
//  
//  /**
//   * Helper function to refresh Volumes
//   */
//  private function refreshVolumes($cloud) {
//    $this->drupalGet('clouds/' . $cloud . '/get_volumes_data');
//  }
//
//  /**
//   * Helper function to refresh snapshots 
//   */
//  private function refreshSnapshots($cloud) {
//    $this->drupalGet('clouds/' . $cloud . '/get_snapshots_data');
//  }
//  
//  /**
//   * Helper function to get the cloud names in the database.
//   * Using the cloud name, we can then run all the tests.
//   * This function will change after multi region gets 
//   * implemented
//   */
//  private function getClouds() {
//    $clouds = array();
//    $query = db_query("select cloud_name from {cloud_clouds}");
//    while ($result = db_result($query)) {
//      $clouds[] = $result;
//    }
//    return $clouds;
//  }
//  
//  /**
//   * Function returns an IP address from the {cloud_aws_elastic_ip} table
//   */
//  private function getIp($cloud) {
//    return db_result(db_query("select public_ip from {cloud_aws_elastic_ip} where cloud_type='%s' and public_ip_name = '%s'", array($cloud, '- changeme -')));
//  }
//  
//  /**
//   * Function finds a Volume by Nickname 
//   */
//  private function getVolumeId($nickname, $cloud) {
//    return db_result(db_query("select volume_id from {cloud_aws_ebs_volumes} where nickname = '%s' and cloud_type = '%s'", array('SimpleTest_Volume', $cloud)));
//  }
//  
//  /**
//   * Helper function to get a specific clouds
//   * api information that is stored in the $data variable
//   */
//  private function getAccessKeys($cloud) {
//    return $this->data["{$cloud}"];
//  }
//  
//  /**
//   * Data definition for test keys 
//   * For each new sub cloud, add its access variables
//   */
//  private $data = array(
//    'amazon_ec2' => array(
//      'amazon_ec2_api_version'    => '2012-06-01',
//      'amazon_ec2_host_uri'       => 'ec2.amazonaws.com',
//      'amazon_ec2_aws_access_key' => '12ABCDEFGHIJKVWXYZ89',
//      'amazon_ec2_aws_secret_key' => '123ABC/defGHIjkl34+LMNopq567RSTuvwxYz89Z',
//      'amazon_ec2_user_id'        => '123456789012',
//      'amazon_ec2_image_upload_url' => 'https://s3.amazonaws.com',
//      'amazon_ec2_image_register_url' => 'https://ec2.amazonaws.com',
//      'amazon_ec2_certificate'    => '-----BEGIN CERTIFICATE-----\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// XXXXXXXXXXXXXX==\n-----END CERTIFICATE-----\n',
//    ),
//    'openstack_nova' => array(
//      'openstack_nova_api_version' => '2012-06-01',
//      'openstack_nova_host_uri' => 'ec2-xxx-xxx-xxx-xxx.compute-1.amazonaws.com:8773/services/Cloud',
//      'openstack_nova_aws_access_key' => 'admin',
//      'openstack_nova_aws_secret_key' => 'admin',
//      'openstack_nova_user_id' => '42',
//      'openstack_nova_image_upload_url' => 'https://s3.amazonaws.com',
//      'openstack_nova_image_register_url' => 'https://ec2.amazonaws.com',
//      'openstack_nova_certificate' => 'aa',
//    ),
//  );
  
}