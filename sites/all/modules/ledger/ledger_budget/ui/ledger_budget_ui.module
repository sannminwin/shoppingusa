<?php

/**
 * @file
 * Ledger Budget UI
 */

/***************************************************************
 * Drupal core hooks
 * *************************************************************/

/**
 * Implements hook_menu().
 */
function ledger_budget_ui_menu() {
  $items = array();

  // Note: the following pages are defined by default Views:
  //   /ledger/budgets

  // Create budget
  $items['ledger/book/%ledger_book/budget'] =
  $items['ledger/budget/add'] = array(
    'title' => 'Add a budget',
    'description' => 'Add a new budget',
    'page callback' => 'ledger_budget_ui_budget_form_wrapper',
    'page arguments' => array(NULL, 'add', 2),
    'access callback' => 'ledger_budget_access',
    'access arguments' => array('create'),
    'weight' => 10,
  );

  // Remove the last page argument from the simple /ledger/budget/add item.
  array_pop($items['ledger/budget/add']['page arguments']);

  // Edit budget
  $items['ledger/budget/%ledger_budget'] = array(
    'title callback' => 'ledger_budget_title',
    'title arguments' => array(2),
    'page callback' => 'ledger_budget_ui_budget_form_wrapper',
    'page arguments' => array(2, 'edit'),
    'access callback' => 'ledger_budget_access',
    'access arguments' => array('update', 2),
  );
  $items['ledger/budget/%ledger_budget/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // Delete budget
  $items['ledger/budget/%ledger_budget/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'ledger_budget_ui_budget_form_wrapper',
    'page arguments' => array(2, 3),
    'access callback' => 'ledger_budget_access',
    'access arguments' => array('delete', 2),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
  );

  $items['admin/config/ledger/budget'] = array(
    'title' => 'Budget settings',
    'description' => 'Configure general budget settings, fields, and displays.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ledger_budget_settings_form'),
    'access arguments' => array('administer ledger'),
  );
  $items['admin/config/ledger/budget/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function ledger_budget_ui_entity_info_alter(&$entity_info) {

  // Expose the fields UI for budgets.
  $entity_info['ledger_budget']['bundles']['ledger_budget']['admin'] = array(
    'path' => 'admin/config/ledger/budget',
    'real path' => 'admin/config/ledger/budget',
    'access arguments' => array('administer ledger'),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function ledger_budget_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // Add action links.
  if ($root_path == 'admin/ledger/budgets' || $root_path == 'ledger/book/%/budgets') {
    $item = menu_get_item('ledger/budget/add');  // Load the menu item for the budget add form
    $item['localized_options']['query']['destination'] = current_path();  // Set the destination argument to the current path
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/***************************************************************
 * Ledger hooks
 * *************************************************************/

/**
 * Implements hook_ledger_book_ops().
 */
function ledger_budget_ui_ledger_book_ops($bid) {
  return array(l('Budgets', 'ledger/book/' . $bid . '/budgets'));
}

/***************************************************************
 * Views hooks
 * *************************************************************/

/**
 * Implements hook_views_api().
 */
function ledger_budget_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ledger_budget_ui') . '/views',
  );
}

/***************************************************************
 * Page callbacks
 * *************************************************************/

/**
 * Wrapper function for the ledger_ui_budget_form that serves as a page callback.
 *
 * @param ...
 * @param $context_entity
 *   An entity that has a 'bid' (ledger_book or ledget_account). If a valid
 *   $budget entity is passed in, this is ignored.
 *
 * @return
 *   Returns a form for adding/editing/deleting the budget.
 */
function ledger_budget_ui_budget_form_wrapper($budget, $op, $context_entity = NULL) {

  // If the budget exists and it has a budget account id, load the book id from
  // its budget account.
  if (!empty($budget->bid) && !empty($budget->budget_aid)) {
    $query = db_select('ledger_budget', 'lb');
    $query->addField('la', 'bid');
    $query->join('ledger_account', 'la', 'lb.budget_aid = la.aid');
    $query->condition('la.aid', $budget->budget_aid);
    $budget->book_id = $query->execute()->fetchField();
  }

  // Otherwise, create a new empty entity.
  else {
    $budget = ledger_budget_new();
    
    // If a context entity with a book id is available, get the book id.
    if (!empty($context_entity->bid)) {
      $budget->book_id = $context_entity->bid;
    }
  }

  // Set the page title
  drupal_set_title(t('Edit budget: @budget', array('@budget' => ledger_budget_title($budget))));

  // Create the breadcrumb for the page
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('Ledger'), 'ledger'),
    l(t('Budgets'), 'ledger/budgets'),
  );
  drupal_set_breadcrumb($breadcrumb);

  // Display the ledger budget form.
  if ($op == 'delete') {
    return drupal_get_form('ledger_budget_delete_form', $budget);
  }
  else {
    return drupal_get_form('ledger_budget_form', $budget, $op);
  }
}

/***************************************************************
 * Budget settings form
 * *************************************************************/

/**
 * Form callback: ledger budget settings form.
 */
function ledger_budget_settings_form($form, &$form_state) {

  // For now, just return a little description.
  $form['description'] = array(
    '#markup' => 'Use the "Fields" and "Display" tabs above to customize budgets.',
  );
  return $form;
}

/***************************************************************
 * Budget entity forms
 * *************************************************************/

/**
 * Form callback: ledger budget edit form.
 */
function ledger_budget_form($form, &$form_state, $budget, $op = 'edit') {

  // Save the budget object to the form values.
  $form['ledger_budget'] = array(
    '#type' => 'value',
    '#value' => $budget,
  );

  // Effective Date
  $form['effective'] = array(
    '#title' => t('Effective'),
    '#type' => 'textfield',
    '#default_value' => date('Y-m-d H:i:s', $budget->effective),
    '#description' => t('Timestamp for when the budget takes effect'),
  );

  // Expire Date
  $form['expires'] = array(
    '#title' => t('Expires'),
    '#type' => 'textfield',
    '#default_value' => date('Y-m-d H:i:s', $budget->expires),
    '#description' => t('Timestamp for when the budget expires'),
  );

  // Use the date_popup module if it's available.
  if (module_exists('date_popup')) {
    $form['effective']['#type'] = 'date_popup';
    $form['effective'] += array(
      '#date_format' => 'Y-m-d H:i:s',
      '#date_type' => DATE_UNIX,
      '#date_timezone' => date_default_timezone(),
    );
    $form['expires']['#type'] = 'date_popup';
    $form['expires'] += array(
      '#date_format' => 'Y-m-d H:i:s',
      '#date_type' => DATE_UNIX,
      '#date_timezone' => date_default_timezone(),
    );
  }

  // The form's wrapper function will try to assign the budget to a book.
  // If it doesn't, display a form element for selecting the book.
  if (!empty($form_state['values']['book_id'])) {
    $book_id = $form_state['values']['book_id'];

    // Add the book id as a form value.
    $form['book_id'] = array(
      '#type' => 'value',
      '#value' => $book_id,
    );
  }

  else {

    // Load a list of books that the user has access to.
    $books = ledger_book_user_books();

    // Add a required field for assigning the budget to a book.
    $form['book_id'] = array(
      '#type' => 'select',
      '#title' => t('Book'),
      '#description' => t('Each budget must be assigned to a book. Select a book from the list or ' . l('create a new book', 'ledger/book/add')),
      '#options' => $books,
      '#default_value' => !empty($form_state['values']['book_id']) ? $form_state['values']['book_id'] : NULL,
      '#required' => TRUE,
      '#ajax' => array(
        'callback' => 'ledger_account_ajax',
        'wrapper' => 'accounts-wrapper',
      ),
    );

    // Override with any values that have been set in this form.
    if (!empty($form_state['values']['book_id'])) {
      $book_id = $form_state['values']['book_id'];
    }

    // Otherwise, select the first available book (this will happen automatically in the browser for new accounts).
    else {
      reset($books);
      $book_id = key($books);
    }
  }

  // Wrapper around the two account fields. Automatically refreshed when the
  // book field above is changed.
  $form['accounts'] = array(
    '#prefix' => '<div id="accounts-wrapper">',
    '#suffix' => '</div>',
  );

  $form['accounts']['budget_aid'] = array(
    '#type' => 'select',
    '#title' => t('Budget Account ID'),
    '#description' => t('The account ID of the budget account'),
    '#options' => ledger_account_select_options($book_id),
    '#default_value' => $budget->budget_aid,
  );

  $form['accounts']['target_aid'] = array(
    '#type' => 'select',
    '#title' => t('Target Account ID'),
    '#description' => t('The account ID of the target account'),
    '#options' => ledger_account_select_options($book_id),
    '#default_value' => $budget->target_aid,
  );

  // Every
  $form['repeat_every'] = array(
    '#title' => t('Repeat every'),
    '#type' => 'textfield',
    '#default_value' => $budget->repeat_every,
    '#required' => TRUE,
  );

  // Repeat Unit
  $form['repeat_unit'] = array(
    '#title' => t('Repeat unit'),
    '#type' => 'select',
    '#default_value' => $budget->repeat_unit,
    '#required' => TRUE,
    '#options' => array(
      'year' => t('Years'),
      'month' => t('Months'),
      'week' => t('Weeks'),
      'day' => t('Days'),
    ),
  );

  // Budget description
  $form['description'] = array(
    '#title' => t('Description'),
    '#type' => 'textfield',
    '#default_value' => $budget->description,
    '#description' => t('A brief description of the budget.'),
  );

  // Add the Field API elements.
  field_attach_form('ledger_budget', $budget, $form, $form_state);

  // Form actions
  $form['actions'] = array('#type' => 'actions');

  // Submit button
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save budget'),
    '#weight' => 40,
  );

  return $form;
}

/**
 * Validate callback for ledger_budget_form().
 */
function ledger_budget_form_validate(&$form, &$form_state) {

  // Load budget object from the form values.
  $budget = $form_state['values']['ledger_budget'];

  // Convert the timestamps to unix-style and validate
  $timestamps = array('effective', 'expires');
  foreach ($timestamps as $timestamp) {
  $form_state['values'][$timestamp] = strtotime($form_state['values'][$timestamp]);
    if ($form_state['values'][$timestamp] === FALSE) {
      form_set_error($timestamp, 'Invalid timestamp.');
    }
  }

  // Make sure the book ID is a valid book.
  $book_id = $form_state['values']['book_id'];
  $book = ledger_book_load($book_id);
  if (!isset($book->bid)) {
    form_set_error('book', 'Invalid book.');
  }

  // Notify field widgets to validate their data.
  field_attach_form_validate('ledger_budget', $budget, $form, $form_state);
}

/**
 * Submit callback for ledger_budget_form().
 */
function ledger_budget_form_submit(&$form, &$form_state) {

  // If the user is editing a budget, merge changes with it.
  if ($form_state['values']['ledger_budget']->bid) {

    // Load the budget object from the form values.
    $budget = $form_state['values']['ledger_budget'];

    // Overwrite with new values.
    $budget->effective = $form_state['values']['effective'];
    $budget->expires = $form_state['values']['expires'];
    $budget->budget_aid = $form_state['values']['budget_aid'];
    $budget->target_aid = $form_state['values']['target_aid'];
    $budget->repeat_every = $form_state['values']['repeat_every'];
    $budget->repeat_unit = $form_state['values']['repeat_unit'];
    $budget->description = $form_state['values']['description'];
  }

  // If a new budget is being created, build a new budget object.
  else {
    $budget = ledger_budget_new($form_state['values']);
  }

  // Notify field widgets.
  field_attach_submit('ledger_budget', $budget, $form, $form_state);

  // Save.
  ledger_budget_save($budget);

  // Display a message.
  drupal_set_message(t('Budget saved.'));

  // If a book id is available, set a redirect to it.
  if (!empty($form_state['values']['book_id'])) {
    $form_state['redirect'] = 'ledger/book/' . $form_state['values']['book_id'] . '/transactions';
  }
}

/**
 * Form callback: confirmation form for deleting a budget.
 *
 * @param $budget
 *   The budget object to delete through the form.
 *
 * @return
 *   The form array to confirm deletion..
 *
 * @see confirm_form()
 */
function ledger_budget_delete_form($form, &$form_state, $budget) {

  // Save the budget object to the form values.
  $form['ledger_budget'] = array(
    '#type' => 'value',
    '#value' => $budget,
  );

  // Confirm form
  $form = confirm_form($form,
    t('Are you sure you want to delete the budget "@description"?', array('@description' => $budget->description)),
    '',
    '<p>' . t('Deleting this budget cannot be undone.') . '</p>',
    t('Delete'),
    t('Cancel'),
    'confirm'
  );
  return $form;
}

/**
 * Submit callback for ledger_budget_delete_form().
 */
function ledger_budget_delete_form_submit($form, &$form_state) {

  // Load the budget object from the form values.
  $budget = $form_state['values']['ledger_budget'];

  // Delete the budget and log the results.
  /**
   * @todo:
   *   Make this check to see if the deletion succeeded, like Drupal Commerce does.
   *   Commerce currently uses it's own custom fork of EntityAPIController which extends the delete() function to return TRUE/FALSE.
   *   See commerce_order_order_delete_form_submit().
   */
  ledger_budget_delete($budget->bid);
  drupal_set_message(t('Budget "@description" has been deleted.', array('@description' => $budget->description)));
  watchdog('ledger_budget', 'Deleted budget "@description."', array('@description' => $budget->description), WATCHDOG_NOTICE);

  // Look up the budget's book, and redirect to the book's budget list.
  $book_id = ledger_budget_book($budget->bid);
  if (!empty($book_id)) {
    $form_state['redirect'] = 'ledger/book/' . $book_id . '/budgets';
  }
}

